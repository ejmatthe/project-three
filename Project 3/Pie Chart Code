#import numpy as np
#import sqlalchemy
#from sqlalchemy.ext.automap import automap_base
#from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func
import pandas as pd
from flask import Flask, jsonify, render_template
#################################################
# Database Setup
#################################################
#engine = create_engine(“sqlite:///data/titanic.sqlite”)
# reflect an existing database into a new model
#Base = automap_base()
# reflect the tables
#Base.prepare(autoload_with=engine)


# Imports and dependencies
#%matplotlib inline
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func
from flask import Flask, jsonify, render_template
demo_data = pd.read_csv('Resources/Demographics.csv')
cause_data = pd.read_csv('Resources/Cause.csv')


##The code section below builds a pie chart with five pie pieces, each pie piece labeled with a relative size auto-calculated to the nearest 10th of a percent.


#import numpy as np
#import matplotlib.pyplot as plt
# if using a Jupyter notebook, include:
#%matplotlib inline


# Pie chart, where the slices will be ordered and plotted counter-clockwise:
labels = ['Firearm', 'Suffocation', 'Posioning', 'Cutting and Pierce', 'Drowning']
sizes = [54.6, 11.6, 25.8 ,0, 0]

# Add Colors  Hex Code then Decimal Code (Red, Green, Blue, DeepPink, Purple)
colors = ['#FF0000','#008000','#0000FF','#FF1493', '#800080']
colors = ["rgb(255,0,0)", "rgb(0,128,0)", "rgb(0,0,255)", "rgb(255,20,147)", "rgb(128,0,128)"]


fig, ax = plt.subplots()
ax.pie(sizes, labels=labels, autopct='%1.1f%%')

# Equal aspect ratio ensures the pie chart is circular.
ax.axis('equal')  
ax.set_title('Suicide Methods')


plt.show()




##The code section below creates a pie chart with the pie pieces separated and the "Chemical" piece exploded out.

#In [7]:
#import numpy as np
import matplotlib.pyplot as plt
# if using a Jupyter notebook, include:
#%matplotlib inline

# Pie chart, where the slices will be ordered and plotted counter-clockwise
labels = ['Firearm', 'Suffocation', 'Posioning', 'Cutting and Pierce', 'Drowning']
sizes = [54.6, 11.6, 25.8 ,0, 0]

# Add Colors  Hex Code then Decimal Code (Red, Green, Blue, DeepPink, Purple)
colors = ['#FF0000','#008000','#0000FF','#FF1493', '#800080']
colors = ["rgb(255,0,0)", "rgb(0,128,0)", "rgb(0,0,255)", "rgb(255,20,147)", "rgb(128,0,128)"]


# Explode out the 'Firearms' pie piece by offsetting it a greater amount
explode = (0.1, 0.1, 0.1, 0.4)

fig, ax = plt.subplots()
ax.pie(sizes,
       explode=explode,
       labels=labels,
       autopct='%1.1f%%',
       shadow=True,
       startangle=90)
       
# Equal aspect ratio ensures the pie chart is circular.       
ax.axis('equal') 
ax.set_title('Suicide Methods')

#plt.tight_layout()
plt.show()



# Pie chart
labels = ['Firearm', 'Suffocation', 'Posioning', 'Cutting and Pierce', 'Drowning']
sizes = [54, 11, 25 ,0, 0]

# Only "explode" the 2nd slice (i.e. 'Suffocation')
explode = [0, 0.1, 0, 0, 0]  

# Add Colors Hex Code then Decimal Code (Red, Green, Blue, DeepPink, Purple)
colors = ['#FF0000','#008000','#0000FF','#FF1493', '#800080']
colors = ["rgb(255,0,0)", "rgb(0,128,0)", "rgb(0,0,255)", "rgb(255,20,147)", "rgb(128,0,128)"]

fig1, ax1 = plt.subplots()
ax1.pie(sizes,
        explode=explode, 
        labels=labels, 
        autopct='%1.1f%%',
        shadow=True, 
        startangle=90)
        
# Equal aspect ratio ensures that pie is drawn as a circle
ax1.axis('equal') 
ax1.set_title('Suicide Methods')

plt.tight_layout()
plt.show()



